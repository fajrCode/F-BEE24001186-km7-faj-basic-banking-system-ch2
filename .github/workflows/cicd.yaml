name: CI/CD

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - main

jobs:
  CI:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20]  # Test against multiple Node.js versions

    env:
      IMAGEKIT_PUBLIC_KEY: ${{ secrets.IMAGEKIT_PUBLIC_KEY }}
      IMAGEKIT_PRIVATE_KEY: ${{ secrets.IMAGEKIT_PRIVATE_KEY }}
      IMAGEKIT_URL_ENDPOINT: ${{ secrets.IMAGEKIT_URL_ENDPOINT }}

    steps:
      # Step 1: Check out the repository
      - name: Check out repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Lint code
      - name: Lint code
        run: npm run lint

      # Step 5: Run tests
      - name: Run tests
        env:
          NODE_ENV: test
        run: npm run test

      # Step 6: Integrate Coverage with Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info    # Path to coverage file, ensure this path is correct
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }} # Required for private repositories
          
  CD:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20]  # Test against multiple Node.js versions

    steps:
      # Step 1: Check out the repository
      - name: Check out repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Generate Prisma Client for Cloud Run
      - name: Generate Prisma Client
        run: npx prisma generate

      # Step 5: Google Cloud Authentication
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCR_SA_KEY }}

      # Step 6: Set up Google Cloud SDK
      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      # Step 7: Configure Docker for GCR Authentication
      - name: Configure Docker for GCR Authentication
        run: gcloud auth configure-docker gcr.io

      # Step 8: Build and Push Docker Image to Google Container Registry (GCR)
      - name: Build and Push Docker Image
        run: |
          IMAGE_NAME=gcr.io/${{ secrets.GCP_PROJECT_ID }}/api-bank-binar
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      # Step 9: Deploy to Cloud Run
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy api-bank-binar \
            --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/api-bank-binar \
            --platform managed \
            --region asia-southeast1 \
            --allow-unauthenticated \
            --set-env-vars DATABASE_URL=${{ secrets.DATABASE_URL }},IMAGEKIT_PRIVATE_KEY=${{ secrets.IMAGEKIT_PRIVATE_KEY }},IMAGEKIT_PUBLIC_KEY=${{ secrets.IMAGEKIT_PUBLIC_KEY }},IMAGEKIT_URL_ENDPOINT=${{ secrets.IMAGEKIT_URL_ENDPOINT }},JWT_SECRET=${{ secrets.JWT_SECRET }},DOMAIN=${{ secrets.DOMAIN }},SENTRY_DSN=${{ secrets.SENTRY_DSN }},EMAIL_USER=${{ secrets.EMAIL_USER }},EMAIL_PASS=${{ secrets.EMAIL_PASS }}
