name: CI/CD

on:
  push:
    branches:
      - main  # Only run CI on pushes to the "dev" branch
  pull_request:
    branches:
      - main  # Run CI on pull requests to the "dev" branch

jobs:
  CI:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20]  # Test against multiple Node.js versions

    env:
      IMAGEKIT_PUBLIC_KEY: ${{ secrets.IMAGEKIT_PUBLIC_KEY }}
      IMAGEKIT_PRIVATE_KEY: ${{ secrets.IMAGEKIT_PRIVATE_KEY }}
      IMAGEKIT_URL_ENDPOINT: ${{ secrets.IMAGEKIT_URL_ENDPOINT }}

    steps:
      # Step 1: Check out the repository
      - name: Check out repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # Step 3: Install pnpm
      - name: Install pnpm
        run: npm install -g pnpm

      # Step 4: Install dependencies
      - name: Install dependencies
        run: pnpm install

      # Step 5: Lint code
      - name: Lint code
        run: pnpm lint

      # Step 6: Run tests
      - name: Run tests
        env:
          NODE_ENV: test
        run: pnpm test

      # Step 7: Integrasion Coverage Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info    # Jalur ke file lcov coverage, pastikan jalur ini benar
          flags: unittests
          token: ${{ secrets.CODECOV_TOKEN }} # Hanya perlu untuk repositori private
          
  CD:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20]  # Test against multiple Node.js versions

    steps:
      # Step 1: Check out the repository
      - name: Check out repository
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # Step 3: Install pnpm
      - name: Install pnpm
        run: npm install -g pnpm

      # Step 4: Install dependencies
      - name: Install dependencies
        run: pnpm install

      # Step 5: Deploy to App Engine
      - name: Google Cloud Auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Create app.yaml with Secrets
        run: |
          echo "runtime: nodejs" > app.yaml
          echo "env: flex" >> app.yaml
          echo "runtime_config:" >> app.yaml
          echo "  operating_system: 'ubuntu22'" >> app.yaml
          echo "  runtime_version: '20'" >> app.yaml
          echo "automatic_scaling:" >> app.yaml
          echo "  min_num_instances: 1" >> app.yaml
          echo "  max_num_instances: 2" >> app.yaml
          echo "beta_settings:" >> app.yaml
          echo "  cloud_sql_instances: fajri-learning-workspace:asia-southeast1:pg-binar-fa" >> app.yaml
          echo "env_variables:" >> app.yaml
          echo "  DATABASE_URL: '${{ secrets.DATABASE_URL }}'" >> app.yaml
          echo "  IMAGEKIT_PRIVATE_KEY: '${{ secrets.IMAGEKIT_PRIVATE_KEY }}'" >> app.yaml
          echo "  IMAGEKIT_PUBLIC_KEY: '${{ secrets.IMAGEKIT_PUBLIC_KEY }}'" >> app.yaml
          echo "  IMAGEKIT_URL_ENDPOINT: '${{ secrets.IMAGEKIT_URL_ENDPOINT }}'" >> app.yaml
          echo "  JWT_SECRET: '${{ secrets.JWT_SECRET }}'" >> app.yaml

      - name: Deploy to Google App Engine
        run: |
          gcloud app deploy app.yaml --quiet
